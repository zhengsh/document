Spring MVC 启动过程

1、在WEB容器启动的时候，会扫描每一个JAR包下的META-INF/services/javax.servlet.ServletContainerInitializer
2、加载文件指定类
3、Spring 的应用会加载感兴趣的 WebApplicationInitializer 接口下的所有组件；
4、并为WebApplicationInitializer 组件创建对象 （组件不是接口、也不是抽象类）
   1）、AbstractContextLoaderInitializer 创建根容器 createRootApplicationContext()
   2）、AbstractDispatcherServletInitializer
       创建一个 WEB 的IOC 容器 createServletApplicationContext();
       创建了一个  DispatcherServlet createDispatcherServlet（）；
       将创建的 DispatcherServlet 添加到 ServletContext 中
               getServletMappings()
   3)、 AbstractAnnotationConfigDispatcherServletInitializer 注解配置的 DispatcherServlet 初始化器
       创建根容器 createRootApplicationContext()
               getRootConfigClasses() 传入一个而配置类
       创建WEB的IOC容器：createServletApplicationContext()
               获取配置类： getServletConfigClasses()

总结：
   以注解的方式启动Spring MVC 继承AbstractAnnotationConfigDispatcherServletInitializer
实现抽象方法制定DispatcherServlet的配置信息


============================ 分割线 ================================

定制Spring MVC

1、开启@EnableWebMvc 启动Spring MVC 的定制功能
    <mvc: annotation-driven/>
2、配置组件（视图解析器、视图映射、静态资源映射、拦截器等）
    extends WebMVCConfigurerAdapter
3、
拓展：
  在Servlet 3.0 之前，Servlet 采用 Thread-Per-Request 的方式处理器请求。
  如果一个请求需要进行IO操作，比如访问数据库、调用三方服务接口等，那么其所对应的线程同步地等待IO
操作完成，而IO操作是非常慢的，所以此时，的线程并不能及时地释放回线程池以供后续使用，在并发量越来越大的情况下，
这样将带来严重的性能问题，即便是像 Spring， Struts 这样的高层框架也脱离不了这样的桎梏， 因为他们都是建立在Servlet 之上的
为了解决这个问题， Servlet 3.0 引入了异步处理。 然后Servlet 3.1 中又引入了非阻塞IO来进一步增强异步处理的性能。