JVM的体系结构暴行主要的几个子系统和内存分析

一、JVM简介

1、垃圾回收期（Garbage Collection）： 负责回收堆内存（Heap）中没有引用的对象
2、类装载坐席系统（Classloader Sub-System）: 除了要定位和导入二进制class文件外，还必须负责校验被导入类的正确性，为类变量分配并初始化内存，以及帮助解析符号引用。
3、执行引擎（Execution Engine）: 负责执行哪些包含在被装载类的方法中的指令。
4、运行时数据区（Java Memory Alloction Area）: 又叫虚拟机内存或者Java内存，虚拟机运行需要从整个计算机内存划分一块内存区域来存储。

二、Java 内存分配
Java内存通常被划分为5个区域：程序计数器（Program Count Register）、本地方法栈（Native Stack）、方法区（Method Area）、栈（Stack）、堆（Heap）

1、程序计数器（Program Count Registor）: 又叫程序寄存器，JVM支持多个线程同时运行，每当一个新线程创建时，他都将得到它自己的PC寄存器（程序计数器）。如果一个线程正在执行的一个Java方法（非native），那么PC寄存器的值蒋总是执行下一条将被执行的指令，如果方法是native的。程序计数器的值不会被定义，JVM的程序寄存器的宽度足够可以持有一个返回地址或者native的指针。

2、栈（Stack）: 又叫做堆栈，JVM每个新创建的线程都分配一个栈，也就是说，对于一个Java程序来说，它的运行是通过对栈的操作来完成的，栈以帧为单位保存线程的状态。Jvm对栈只进行两种操作：以帧为单位的压栈和出栈操作。我们知道，某个线程正在执行的方法称为此线程的当前方法，我们可能不知道，当前方法使用的帧程序当前帧。当现成激活一个Java方法，JVM就会在线程的Java堆栈里新雅茹一个帧，这个帧自然成为了当前帧。在此方法执行期间，这个帧将用来保存参数，局部变量，中间计算过程和其他数据。从Java的这种分配机制来看，堆栈又可以这样理解：栈（Stack）是操作系统在建立某个进程或者线程，（在支持多先测很难过的操作系统中是线程）为这个线程简历一个储存其余，该区域具有先进先出的特征。其相关设置参数：
-Xss -- 设置方法栈的最大值

2.1、本地方法栈（Native Stack）: 存储本地方法的调用状态

2、方法区（Method Area）：当虚拟机装载一个class文件时，它会从这个class文件包含的二进制数据中解析类型信息，然后把这些类型信息（包括类信息，常量信息，静态变量等）放入方法区栈，改内存区域被所有的线程共享。本地方法区中存在一块特殊的内存区域，叫常量池（Constant Pool）,这块内存将于String类型的分析密切相关。

3、堆（Heap）:  堆是虚拟机所管理的内存中最大一块。Java 堆是所有线程共享的一块内存区域。在此区域的唯一目的就是存放实例，几乎所有的对象实例都是在这里分配内存，但是在这个对象的引用却是在栈（Stack）中分配，因此执行String s = new String ("s"), 需要从两个地方分配内存：在堆中为String对象分配内存。在栈中为引用（这个堆对象的内存地址，即指针）分配内存

  Java 虚拟机有一天在堆中分配新对象的指令，却没有释放内存的指令，正如你无法使用Java代码去明确释放一个的对象，虚拟机自己负责决定如何以及何时释放不在被运行的程序引用的程序引用的对象所占据的内存，通常，虚拟机把这个任务交给垃圾收集器（Garbage Collection）. 其相关设置参数：
  -Xms -- 设置堆内存初始化大小
  -Xms -- 设置堆内存最大值
  -XX:MaxTenuringTreshold -- 设置对象在新生代中存活的次数
  -XX:PretenureSizeTreshold -- 设置草果指定大小的大对象直接分配在年老代中

4、Java堆是垃圾收集管理的主要区域，因此又称为“GC 堆”（Garbage Collectioned Heap)，现在的垃圾收集器基本都是采用分带收集法。所以 Java 堆，可以细分为：新生代(Young Generation)，年老代(Old Generation) ，如下图所示，分代收集算法的思想：
一种说法，为较高频率对年轻代的对象（young generation）进行扫描和回收，这种叫做minor collection , 而对老代对象（old generation） 的交叉回收频率要低很多。称为major collection 。这样就不需要每次GC都将内存中所有对象都扫描一遍。以便让出更多的系统资源供应用系统使用。
另一种书法，在分配独享遇到内存不足时，先对新生代进行GC（Young GC）；当新生代GC之后依然无法满足内存空间分配需求时，才会对整个堆空间以及方法区进行GC（Full GC）

  4.1、永久代（Permanent Generation），存放的都是在JVM初始化加载器加载的一些类信息（包括类信息、常量、静态变量等）这些信息的生存周期比较长，GC不会在主程序运行期对PermGen Space 进行清理，所以如果应用中有很多class的话，就很有可能出现PermGen Space。相关参数设置：
   -XX:PemSize -- 设置Perm区的初始大小
   -XX:MaxPermSize -- 设置Perm区的最大值

  4.2、新生代（Young Generation）又分为：Eden区和Survivor区， Survivor 区分为 From Space和 To Space. Eden 区是对象最初分配到的地方；默认情况下，Form Space 和 To Space 的区域大小相等。JVM进行 Minor GC时， 将Eden 中还存活对象拷贝到Survivor 区中，还会将Survivor 去中还存活的对象拷贝到Tenured 区中。 在这种GC 模式下，JVM 为了提升GC效率。 将Survivor 区分为From Space 和To Space 。这样就可以将对象回收和对象晋升分离出来。新生代的大小设置有2个参数：
  -Xmn -- 设置新生代内存大小
  -XX:SurvivorRatio -- 设置Eden 与 Survivor 空间的大小比例

  4.3、老年代 （Old Generation）当OLD空间不够时，JVM会在OLD区进行 major collection; 完全垃圾收集后， 若Survivor及OLD区任然无法存放从 Eden 复制过来的=部分对象，导致JVM无法在Eden 区委新对象创建内存区域。则出现"Out of memory"
